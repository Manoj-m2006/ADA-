#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
// Partition function to place the pivot element in its correct position 
int partition(int arr[], int low, int high) 
{ 
{ 
int pivot = arr[high]; // pivot 
int i = (low - 1); // Index of smaller element 
for (int j = low; j < high; j++) 
// If current element is smaller than or equal to pivot 
if (arr[j] <= pivot) { 
i++; // increment index of smaller element 
int temp=arr[i]; 
arr[i]=arr[j]; 
arr[j]=temp; 
} } 
int temp=arr[i+1]; 
arr[i+1]=arr[high]; 
arr[high]=temp; 
return (i + 1); 
} 
// QuickSort function 
void quickSort(int arr[], int low, int high) 
{ 
{ 
if (low < high)
int pi = partition(arr, low, high); 
// Separately sort elements before partition and after partition 
quickSort(arr, low, pi - 1); 
quickSort(arr, pi + 1, high); 
}} 
int main() 
{ 
int n; 
printf("Enter number of elements: "); 
scanf("%d", &n); 
int arr[n]; 
srand(time(0)); 
for (int i = 0; i < n; i++) 
{ 
arr[i] = rand() % 10000; 
} 
clock_t start = clock(); 
quickSort(arr,0,n-1); 
clock_t end = clock(); 
double time_taken = ((double)(end - start))/CLOCKS_PER_SEC; 
printf("Time taken to sort %d elements is %f seconds.\n", n, time_taken); 
return 0; 
} 
