#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
// Function to merge two halves 
void merge(int arr[], int lb, int mid, int ub) { 
int n1 = mid - lb + 1; 
int n2 = ub - mid; 
int left[n1], right[n2]; 
for (int i = 0; i < n1; i++) 
left[i] = arr[lb + i]; 
for (int j = 0; j < n2; j++) 
right[j] = arr[mid + 1 + j]; 
int i = 0, j = 0, k = lb; 
while (i < n1 && j < n2) { 
if (left[i] <= right[j]) { 
arr[k] = left[i]; 
i++; 
} else { 
arr[k] = right[j]; 
j++; 
} 
k++; 
} 
while (i < n1) { 
arr[k] = left[i]; 
i++; 
k++;
} 
while (j < n2) { 
arr[k] = right[j]; 
j++; 
k++; 
} 
} 
// Function to implement merge sort 
void mergeSort(int arr[], int lb, int ub) { 
if (lb < ub) { 
int mid = lb + (ub - lb) / 2; 
mergeSort(arr, lb, mid); 
mergeSort(arr, mid + 1, ub); 
merge(arr, lb, mid, ub); 
} 
} 
int main() { 
int n; 
printf("Enter number of elements: "); 
scanf("%d", &n); 
int arr[n]; 
srand(time(0)); 
for (int i = 0; i < n; i++) { 
arr[i] = rand() % 10000; 
} 
clock_t start = clock(); 
mergeSort(arr, 0, n - 1); 
clock_t end = clock(); 
double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC; 
printf("Time taken to sort %d elements is %f seconds.\n", n, time_taken); 
return 0; 
}
